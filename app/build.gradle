apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'AndResGuard'

android {
    compileSdkVersion Integer.parseInt("$compileSdkVer")
    buildToolsVersion "$buildToolsVer"

    defaultConfig {
        applicationId "com.v2ray.actinium"
        minSdkVersion 15
        targetSdkVersion Integer.parseInt("$targetSdkVer")
        versionCode 32
        versionName "0.10.24-weekly-23-lib3.36"
    }

    signingConfigs {
        release {
            File signingConfFile = file("../signing.properties")
            Properties signingConf = new Properties()
            signingConf.load(new FileInputStream(signingConfFile))

            storeFile file(signingConf['storeFile'])
            storePassword signingConf['storePassword']
            keyAlias signingConf['keyAlias']
            keyPassword signingConf['keyPassword']
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            pseudoLocalesEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 + android.defaultConfig.versionCode
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    implementation project(':libv2ray')
    implementation project(':dpreference')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Android support library
    implementation "com.android.support:support-v4:27.1.1"
    implementation "com.android.support:appcompat-v7:27.1.1"
    implementation "com.android.support:design:27.1.1"
    implementation "com.android.support:cardview-v7:27.1.1"

    // DSL
    implementation "org.jetbrains.anko:anko-sdk15:$ankoVersion"
    implementation "org.jetbrains.anko:anko-support-v4:$ankoVersion"
    implementation "org.jetbrains.anko:anko-appcompat-v7:$ankoVersion"
    implementation "org.jetbrains.anko:anko-design:$ankoVersion"

    implementation 'com.orhanobut:logger:1.15'

    implementation('commons-validator:commons-validator:1.5.1') {
        exclude group: 'commons-logging'
        exclude group: 'commons-collections'
        exclude group: 'commons-digester'
        exclude group: 'commons-beanutils'
    }

    implementation 'com.google.code.gson:gson:2.8.0'

    implementation 'com.github.pwittchen:reactivenetwork:0.5.1'

    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.1@aar'

    implementation 'de.psdev.licensesdialog:licensesdialog:1.8.1'

    implementation 'com.dinuscxj:recycleritemdecoration:1.0.0'

    // LeakCanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    implementation 'io.reactivex:rxkotlin:0.60.0'

    // Firebase
//    implementation "com.google.firebase:firebase-core:$firebaseVersion"
//    implementation "com.google.firebase:firebase-crash:$firebaseVersion"
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlinVersion"
        classpath 'com.tencent.mm:AndResGuard-gradle-plugin:1.2.10'
    }
}

andResGuard {
    // mappingFile = file("./resource_mapping_app-release.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // it will keep the origin path of your resources when it's true
    keepRoot = false
    whiteList = [
            // for your icon
            "R.mipmap.ic_launcher",
            // for fabric
            "R.string.com.crashlytics.*",
            // for umeng update
            "R.string.umeng*",
            "R.string.UM*",
            "R.string.tb_*",
            "R.layout.umeng*",
            "R.layout.tb_*",
            "R.drawable.umeng*",
            "R.drawable.tb_*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.color.tb_*",
            "R.style.*UM*",
            "R.style.umeng*",
            "R.id.umeng*",
            // umeng share for sina
            "R.drawable.sina*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            // umeng share for facebook
            "R.layout.*facebook*",
            "R.id.*facebook*",
            // umeng share for messager
            "R.layout.*messager*",
            "R.id.*messager*",
            // umeng share commond
            "R.id.progress_bar_parent",
            "R.id.webView"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.10'
        //path = "/usr/local/bin/7za"
    }
}

//apply plugin: 'com.google.gms.google-services'
